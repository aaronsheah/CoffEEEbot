// Generated by gencpp from file sound_play/question_msg.msg
// DO NOT EDIT!


#ifndef SOUND_PLAY_MESSAGE_QUESTION_MSG_H
#define SOUND_PLAY_MESSAGE_QUESTION_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sound_play
{
template <class ContainerAllocator>
struct question_msg_
{
  typedef question_msg_<ContainerAllocator> Type;

  question_msg_()
    : dialogue()
    , ans(0)
    , stock(0)  {
    }
  question_msg_(const ContainerAllocator& _alloc)
    : dialogue(_alloc)
    , ans(0)
    , stock(0)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _dialogue_type;
  _dialogue_type dialogue;

   typedef int32_t _ans_type;
  _ans_type ans;

   typedef int32_t _stock_type;
  _stock_type stock;




  typedef boost::shared_ptr< ::sound_play::question_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sound_play::question_msg_<ContainerAllocator> const> ConstPtr;

}; // struct question_msg_

typedef ::sound_play::question_msg_<std::allocator<void> > question_msg;

typedef boost::shared_ptr< ::sound_play::question_msg > question_msgPtr;
typedef boost::shared_ptr< ::sound_play::question_msg const> question_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sound_play::question_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sound_play::question_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sound_play

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sound_play': ['/home/human/catkin_ws/devel/share/sound_play/msg', '/home/human/catkin_ws/src/audio_common/sound_play/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sound_play::question_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sound_play::question_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sound_play::question_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sound_play::question_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sound_play::question_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sound_play::question_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sound_play::question_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "585ea6598299f8e066244f262bd13943";
  }

  static const char* value(const ::sound_play::question_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x585ea6598299f8e0ULL;
  static const uint64_t static_value2 = 0x66244f262bd13943ULL;
};

template<class ContainerAllocator>
struct DataType< ::sound_play::question_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sound_play/question_msg";
  }

  static const char* value(const ::sound_play::question_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sound_play::question_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string dialogue\n\
int32 ans\n\
int32 stock\n\
";
  }

  static const char* value(const ::sound_play::question_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sound_play::question_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dialogue);
      stream.next(m.ans);
      stream.next(m.stock);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct question_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sound_play::question_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sound_play::question_msg_<ContainerAllocator>& v)
  {
    s << indent << "dialogue: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dialogue);
    s << indent << "ans: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ans);
    s << indent << "stock: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stock);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOUND_PLAY_MESSAGE_QUESTION_MSG_H
